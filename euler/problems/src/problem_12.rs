// https://projecteuler.net/problem=12

/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1:  1
 3:  1,3
 6:  1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

SOLUTION: brute force

ANSWER: 76576500
*/
use num::integer::Roots;

pub fn highly_divisible_triangle_number(num_of_divisors: usize) -> i64  {
    let mut triangle_number = 1;
    let mut natural_number = 2;

    while num_of_divisors > find_factors(triangle_number).len() {
        triangle_number += natural_number;
        natural_number += 1;
    }
    return triangle_number;
}

fn find_factors(num: i64) -> Vec<i64> {
    let mut factors = vec![];

    for i in 1..=num.sqrt() {
        if num % i == 0 {
            factors.push(i);
            factors.push(num/i);
        }
    }

    return factors;
}


#[cfg(test)]
mod tests  {
  use super::*;

    #[test]
    fn highly_divisible_triangle_number_tests()  {
      assert_eq!(highly_divisible_triangle_number(5), 28);
      assert_eq!(highly_divisible_triangle_number(500), 76576500);
    }

    #[test]
    fn find_factors_tests() {
        assert_eq!(find_factors(3), vec![1, 3]);
        assert_eq!(find_factors(21), vec![1, 21, 3, 7]);
        assert_eq!(find_factors(28), vec![1, 28, 2, 14, 4, 7]);
    }
}
